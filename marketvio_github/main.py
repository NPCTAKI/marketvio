# main.py - Marketvio Telegram bot + simple webapp (polling)\nimport os, json, re, uuid, logging, threading\nfrom flask import Flask, jsonify, send_from_directory\nfrom telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup, Update\nfrom telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes\nfrom datetime import datetime\nimport config\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nBOT_TOKEN = config.BOT_TOKEN\nADMIN_CHAT_ID = config.ADMIN_CHAT_ID\nUPLOAD_DIR = 'uploads'\nos.makedirs(UPLOAD_DIR, exist_ok=True)\n\nPRICES_FILE = 'prices.json'\nORDERS_FILE = 'orders.json'\n\nwith open(PRICES_FILE, 'r', encoding='utf-8') as f:\n    PRICES = json.load(f)['UC_Prices']\n\nif not os.path.exists(ORDERS_FILE):\n    with open(ORDERS_FILE, 'w', encoding='utf-8') as f:\n        json.dump([], f, ensure_ascii=False, indent=2)\n\ndef save_order(order):\n    with open(ORDERS_FILE, 'r', encoding='utf-8') as f:\n        data = json.load(f)\n    data.append(order)\n    with open(ORDERS_FILE, 'w', encoding='utf-8') as f:\n        json.dump(data, f, ensure_ascii=False, indent=2)\n\ndef format_currency(n):\n    return f"{int(n):,}".replace(',', '.') + ' UZS'\n\ndef build_main_keyboard(lang='uz', is_admin=False):\n    labels = {\n        'uz': ['UC Narxlari', 'Buyurtma', 'Mening buyurtmalarim', 'Til', 'Support'],\n        'ru': ['UC Prices', 'Order', 'My Orders', 'Language', 'Support'],\n        'en': ['UC Prices', 'Order', 'My Orders', 'Language', 'Support']\n    }\n    l = labels.get(lang, labels['uz'])\n    kb = [\n        [InlineKeyboardButton(l[0], callback_data=f'prices|{lang}')],\n        [InlineKeyboardButton(l[1], callback_data=f'buy|{lang}')],\n        [InlineKeyboardButton(l[2], callback_data=f'myorders|{lang}')],\n        [InlineKeyboardButton(l[3], callback_data=f'lang|{lang}')],\n        [InlineKeyboardButton(l[4], callback_data=f'support|{lang}')],\n    ]\n    if is_admin:\n        kb.append([InlineKeyboardButton('Admin Panel', callback_data=f'adminpanel|{lang}')])\n    return InlineKeyboardMarkup(kb)\n\nasync def start(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    user = update.effective_user\n    lang = 'uz'\n    text = f"Marketvio\n\nHello, {user.first_name}! Welcome to Marketvio UC service."\n    await update.message.reply_text(text, reply_markup=build_main_keyboard(lang, is_admin=(user.id==ADMIN_CHAT_ID)))\n\nasync def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    query = update.callback_query\n    await query.answer()\n    data = query.data\n    parts = data.split('|')\n    cmd = parts[0]\n    lang = parts[1] if len(parts)>1 else 'uz'\n    user = query.from_user\n\n    if cmd == 'prices':\n        buttons = []\n        text_lines = ['Marketvio - UC Prices\n\n']\n        for p in PRICES:\n            uc = p['uc']; old = p['old_price']; new = p['new_price']\n            text_lines.append(f"{uc} UC - {format_currency(int(new))}  (old {format_currency(int(old))})")\n            buttons.append([InlineKeyboardButton(f"Buy {uc} UC - {format_currency(int(new))}", callback_data=f'select|{uc}|{new}|{lang}')])\n        text = '\n'.join(text_lines)\n        await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(buttons))\n        return\n\n    if cmd == 'select':\n        uc = parts[1]; price = parts[2]\n        await query.message.reply_text(f"Selected: {uc} UC - {format_currency(int(price))}. Please send your PUBG ID (starts with 5, 11 digits).")\n        context.user_data['pending'] = {'uc': uc, 'price': price, 'lang': lang}\n        return\n\n    if cmd == 'myorders':\n        with open(ORDERS_FILE,'r',encoding='utf-8') as f:\n            orders = json.load(f)\n        user_orders = [o for o in orders if o.get('tg_id')==user.id]\n        if not user_orders:\n            await query.message.reply_text('No orders found.')\n            return\n        lines = ['Your orders:']\n        for o in user_orders[-10:]:\n            lines.append(f"{o['id']} | {o['uc']} UC | {o['price']} UZS | {o['status']}")\n        await query.message.reply_text('\n'.join(lines))\n        return\n\n    if cmd == 'lang':\n        kb = [\n            [InlineKeyboardButton('UZ', callback_data='setlang|uz')],\n            [InlineKeyboardButton('RU', callback_data='setlang|ru')],\n            [InlineKeyboardButton('EN', callback_data='setlang|en')],\n        ]\n        await query.message.reply_text('Select language', reply_markup=InlineKeyboardMarkup(kb))\n        return\n\n    if cmd == 'support':\n        await query.message.reply_text('Support: @T11313')\n        return\n\n    if cmd == 'setlang':\n        newlang = parts[1] if len(parts)>1 else 'uz'\n        await query.message.reply_text('Language set')\n        await query.message.reply_text('Menu:', reply_markup=build_main_keyboard(newlang, is_admin=(user.id==ADMIN_CHAT_ID)))\n        return\n\n    if cmd == 'adminpanel':\n        if user.id != ADMIN_CHAT_ID:\n            await query.message.reply_text('Unauthorized')\n            return\n        with open(ORDERS_FILE,'r',encoding='utf-8') as f:\n            orders = json.load(f)\n        total_orders = len(orders)\n        total_sales = sum(int(o['price']) for o in orders) if orders else 0\n        total_uc = sum(int(o['uc']) for o in orders) if orders else 0\n        last = orders[-5:] if orders else []\n        lines = [f"Marketvio Admin Panel\n\nTotal Orders: {total_orders}\nTotal UC Sold: {total_uc}\nTotal Sales: {total_sales} UZS\n\nLast orders:"]\n        for o in last:\n            lines.append(f"{o['id']} - {o['uc']} UC - {o['price']} UZS - @{o.get('username','-')}")\n        await query.message.reply_text('\n'.join(lines))\n        return\n\nasync def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    text = update.message.text.strip()\n    user = update.message.from_user\n    pending = context.user_data.get('pending')\n    if pending:\n        pubg = text\n        if not re.match(r'^5\\d{10}$', pubg):\n            await update.message.reply_text('Invalid PUBG ID. Must start with 5 and be 11 digits.')\n            return\n        oid = str(uuid.uuid4())[:8]\n        order = {\n            'id': oid,\n            'tg_id': user.id,\n            'username': user.username or user.first_name,\n            'uc': pending['uc'],\n            'price': pending['price'],\n            'pubg_id': pubg,\n            'status': 'pending',\n            'payment_note': '',\n            'created_at': datetime.utcnow().isoformat()\n        }\n        save_order(order)\n        bot = Bot(BOT_TOKEN)\n        note = f"New order {oid}\\nUser: @{order['username']} ({order['tg_id']})\\nUC: {order['uc']} | price: {order['price']} UZS\\nPUBG ID: {order['pubg_id']}\\nCommands:\\n/confirm {oid} \\n/cancel {oid} <reason>"\n        try:\n            bot.send_message(chat_id=ADMIN_CHAT_ID, text=note)\n        except Exception as e:\n            logger.error('Failed to send admin message: %s', e)\n        await update.message.reply_text(f"Order received. ID: {oid}. Make the payment and inform admin.\nMarketvio")\n        context.user_data['pending'] = None\n        return\n\n    if text.lower() in ['/start', 'start']:\n        await start(update, context)\n        return\n\n    await update.message.reply_text('Please use the menu or /start')\n\nasync def confirm_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    user = update.effective_user\n    if user.id != ADMIN_CHAT_ID:\n        await update.message.reply_text('Unauthorized')\n        return\n    if not context.args:\n        await update.message.reply_text('Usage: /confirm <order_id>')\n        return\n    oid = context.args[0].strip()\n    with open(ORDERS_FILE,'r',encoding='utf-8') as f:\n        orders = json.load(f)\n    found = False\n    for o in orders:\n        if o['id'] == oid:\n            o['status'] = 'delivered'\n            found = True\n            tg_id = o['tg_id']\n            try:\n                bot = Bot(BOT_TOKEN)\n                bot.send_message(chat_id=tg_id, text=f"Your order {oid} has been delivered.\nMarketvio")\n            except Exception as e:\n                logger.error('Notify user failed: %s', e)\n            break\n    if found:\n        with open(ORDERS_FILE,'w',encoding='utf-8') as f:\n            json.dump(orders, f, ensure_ascii=False, indent=2)\n        await update.message.reply_text(f'Order {oid} marked delivered.')\n    else:\n        await update.message.reply_text('Order not found.')\n\nasync def cancel_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):\n    user = update.effective_user\n    if user.id != ADMIN_CHAT_ID:\n        await update.message.reply_text('Unauthorized')\n        return\n    if not context.args:\n        await update.message.reply_text('Usage: /cancel <order_id> <reason>')\n        return\n    oid = context.args[0].strip()\n    reason = ' '.join(context.args[1:]) if len(context.args)>1 else 'Cancelled by admin'\n    with open(ORDERS_FILE,'r',encoding='utf-8') as f:\n        orders = json.load(f)\n    for o in orders:\n        if o['id'] == oid:\n            o['status'] = 'cancelled'\n            o['payment_note'] = reason\n            try:\n                bot = Bot(BOT_TOKEN)\n                bot.send_message(chat_id=o['tg_id'], text=f"Your order {oid} was cancelled. Reason: {reason}\nMarketvio")\n            except Exception as e:\n                logger.error('Notify user failed: %s', e)\n            break\n    with open(ORDERS_FILE,'w',encoding='utf-8') as f:\n        json.dump(orders, f, ensure_ascii=False, indent=2)\n    await update.message.reply_text(f'Order {oid} cancelled.')\n\ndef run_flask():\n    app = Flask(__name__)\n    @app.route('/webapp/')\n    def webindex():\n        return send_from_directory('templates', 'index.html')\n\n    @app.route('/api/prices')\n    def api_prices():\n        return jsonify({'ok': True, 'prices': PRICES})\n\n    @app.route('/api/orders')\n    def api_orders():\n        with open(ORDERS_FILE,'r',encoding='utf-8') as f:\n            orders = json.load(f)\n        return jsonify({'ok': True, 'count': len(orders)})\n\n    app.run(host=config.HOST, port=config.PORT)\n\nasync def main():\n    application = ApplicationBuilder().token(BOT_TOKEN).build()\n    application.add_handler(CommandHandler('start', start))\n    application.add_handler(CallbackQueryHandler(callback_handler))\n    application.add_handler(CommandHandler('confirm', confirm_cmd))\n    application.add_handler(CommandHandler('cancel', cancel_cmd))\n    from telegram.ext import MessageHandler, filters\n    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))\n\n    t = threading.Thread(target=run_flask, daemon=True)\n    t.start()\n\n    await application.initialize()\n    await application.start()\n    logger.info('Bot started polling')\n    await application.updater.start_polling()\n    import asyncio\n    while True:\n        await asyncio.sleep(3600)\n\nif __name__ == '__main__':\n    import asyncio\n    asyncio.run(main())\n